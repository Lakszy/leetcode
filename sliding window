// O(n) solution for finding maximum sum of
// a subarray of size k
#include <iostream>
using namespace std;

// Returns maximum sum in a subarray of size k.
int maxSum(int arr[], int n, int k)
{

	if (n < k) {
		cout << "Invalid";
		return -1;
	}

	// Compute sum of first window of size k
	int max_sum = 0;
	for (int i = 0; i < k; i++)
		max_sum += arr[i];
		
		
		int window_sum=max_sum;
		for (int i=k ;i<n;i++){
		  //  now we will add next element to array and subtract the prevoius in window sum
		  window_sum+=arr[i]-arr[i-k];
		  max_sum=max(window_sum,max_sum);
		  
		}
		return max_sum;

}
int main()
{
	int arr[] = { 1, 4, 2, 10, 2, 3, 1, 0, 20 };
	int k = 4;
	int n = 9;
	cout << maxSum(arr, n, k);
	return 0;
}
